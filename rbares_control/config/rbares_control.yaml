robotnik_base_control:
  type: rbares_controller/RbAresController
  traction:
    traction_joint:
      joint_name: robot_traction_joint
      max_speed: 27.27 # rad/s
  steer:
    steer_joint:
      joint_name: robot_steer_joint
      max_angle: 1.57 # rad
      min_angle: -1.57
  elevator_joint:
    name: robot_elevator_joint
  limits:
    elevator_down:
      linear_speed_limit: 1.5 # m/s
      linear_acceleration_limit: 0.5 # m/s^2
      linear_deceleration_limit: 1 # m/s^2
      angular_speed_limit: 0.5 # rad/s
      angular_acceleration_limit: 0.5 # rad/s^2
      angular_deceleration_limit: 0.5 # rad/s^2
    elevator_up:
      linear_speed_limit: 1.5 # m/s
      linear_acceleration_limit: 0.5 # 1.5 for same as elevator_down # m/s^2
      linear_deceleration_limit: 2.0 # 3.0 for same as elevator_down # m/s^2
      angular_speed_limit: 0.5 # rad/s
      angular_acceleration_limit: 0.5 # 3.0 for same as elevator_down # rad/s^2
      angular_deceleration_limit: 0.5 # 3.0 for same as elevator_down # rad/s^2
    # TODO: still not implemented!
    # how to deccelerate in case of hard_brake. 
    hard_brake:
      linear_speed_limit: 1.5 # m/s
      linear_acceleration_limit: 1.5 # m/s^2
      linear_deceleration_limit: 4 # m/s^2
      angular_speed_limit: 3 # rad/s
      angular_acceleration_limit: 3.0 # rad/s^2
      angular_deceleration_limit: 6.0 # rad/s^2
  motor_modes:
    default: soft
    soft:
      kp: 0.0005
      ki: 0.01273
      kd: 0
    hard:
      kp: 0.001887
      ki: 0.01273
      kd: 0
  set_velocity_pid_service: 'robotnik_base_hw/set_velocity_pid'
  hard_brake: false
  odom_frame: robot_odom
  robot_base_frame: robot_base_footprint
  odom_broadcast_tf: true
  odom_topic: 'odom'
  wheel_base: 1.375
  wheel_base_elevator_up: 1.37
  wheel_base_elevator_down: 1.375
  track_width: 0.46
  wheel_diameter: 0.249
  cmd_watchdog_duration: 1
  imu_watchdog_duration: 0.1
  imu_topic: 'imu/data'
  odom_publish_frequency: 100
  cmd_vel        : 'cmd_vel'
  applied_cmd_vel : 'applied_cmd_vel'
  motion_odometry: true
  in_motion_timer: 2.0
  position_covariance: 0.0000001
  orientation_covariance: 0.0000001
  linear_velocity_covariance: 0.0000000001
  angular_velocity_covariance: 0.0000000001
  set_digital_output_service_hw: robotnik_modbus_io/write_digital_output
  io_topic: robotnik_modbus_io/input_output
  has_elevator: false
  elevator_position_up: 0.05 # linear height (m)
  elevator_position_down: 0.0
  elevator_digital_output_up: 23 
  elevator_digital_output_down: 22
  elevator_digital_input_up: 316
  elevator_digital_input_down: 315
  reverse_logic: false # Make sure what logic is your robot using
  # this parameters are used to check if the steer joints are in the correct position to follow the command
  joint_oriented_minimum_threshold: 0.25 # in rad, this is the minimum orientation difference between reference and actual position
  joint_oriented_velocity_factor: 0.033 # in s, this is used to increase the minimum orientation as the robot increases its speed.
  traction_threshold: 0.1
  joint_acceleration_limit: 10.5
  joint_deceleration_limit: 5.5
  unsafe_zone_velocity_limit: 3.2
  safe_zone_velocity_limit: 5.5
  safety_zone_angle: 0.39269908169
  soft_limit_zone: 1


rbares_elevator_controller:
  type: "rbares_elevator_controller/RbAresElevatorController"
  joint:
    elevator_joint:
      name: robot_elevator_joint
  elevator_position_up: 10
  elevator_position_down: 0.0
  # delay time to perform the elevation
  elevation_action_time: 0.1

steer_controller:
  type: position_controllers/JointPositionController
  joint: $(arg prefix)steer_joint

traction_controller:
  type: velocity_controllers/JointVelocityController
  joint: $(arg prefix)traction_joint

elevator_controller:
  type: position_controllers/JointPositionController
  joint: $(arg prefix)elevator_joint

joint_read_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 100.0

joint_read_command_controller:
  type: joint_read_command_controller/JointReadCommandController
  publish_rate: 100.0
